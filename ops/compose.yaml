version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    ports: ["2181:2181"]
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [routeplan_network]
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    ports: ["9092:9092", "29092:29092"]
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks: [routeplan_network]
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: routeplan_db
    hostname: db
    volumes: [postgres_data:/var/lib/postgresql/data/]
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports: ["${DATABASE_HOST_PORT:-5432}:5432"]
    networks: [routeplan_network]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME} -q"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    container_name: redis
    hostname: redis
    ports: ["6379:6379"]
    networks: [routeplan_network]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  routes_management_service: # Django сервис
    build:
      context: ../services/RoutesManagementService
      dockerfile: Dockerfile
    container_name: routes_management_app
    volumes: ["../services/RoutesManagementService:/app"]
    ports: ["8000:8000"]
    env_file:
      - ./.env
    environment:
      PYTHONUNBUFFERED: 1
      DJANGO_SETTINGS_MODULE: project_config.settings
      # ... остальные переменные окружения, которые читаются из .env
    depends_on:
      db: {condition: service_healthy}
      kafka: {condition: service_started}
      redis: {condition: service_healthy}
    networks: [routeplan_network]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s
    # !!! ЭТО КРИТИЧЕСКОЕ ИЗМЕНЕНИЕ: Запускаем entrypoint.sh и затем Gunicorn в ОДНОЙ КОМАНДЕ !!!
    command: >
      sh -c "/usr/local/bin/entrypoint.sh && \
             gunicorn project_config.wsgi:application --bind 0.0.0.0:8000 --workers 3"
  routes_calculator_service:
    build:
      context: ../services/RoutesCalculatorService
      dockerfile: Dockerfile
    container_name: routes_calculator_app
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001"]
    volumes: ["../services/RoutesCalculatorService:/app"]
    ports: ["8001:8001"]
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      # ... остальные переменные окружения, которые читаются из .env
    depends_on:
      db: {condition: service_healthy}
      kafka: {condition: service_started}
      redis: {condition: service_healthy}
      # routes_management_service: {condition: service_healthy} # УДАЛИТЕ эту зависимость, если она у вас есть
    networks: [routeplan_network]
    restart: unless-stopped

volumes:
  postgres_data: {}

networks:
  routeplan_network:
    driver: bridge